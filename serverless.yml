
service: api-rest-pinpass-crawler

custom:
  environment: ${file(./variables.global.yml)}
  wsgi:
    app: cirbox.wsgi.application
    packRequirements: false # Dudas con esta variable
  pythonRequirements:
    dockerizePip: non-linux
  warmup:
    folderName: '_warmup' # Name of the folder created for the generated warmup 
    cleanFolder: false
    memorySize: 256
    name: ${self:service}-${self:provider.stage}-lambda-warmer
    events:
      - schedule: 'rate(5 minutes)' # Run WarmUp every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
    timeout: 20
    prewarm: true # Run WarmUp immediately after a deployment
    vpc: false
  vpc:
    dev:
      securityGroupIds:
        - sg-09ef11f981eedf49a
      subnetIds:
        - subnet-0e489891d3a95fc34
        - subnet-07255b931812dc43a
        - subnet-01e9b3ae01d9f985d
    dev-2:
      securityGroupIds:
        - sg-09ef11f981eedf49a
      subnetIds:
        - subnet-0e489891d3a95fc34
        - subnet-07255b931812dc43a
        - subnet-01e9b3ae01d9f985d
    staging:
      securityGroupIds:
        - sg-09ef11f981eedf49a
      subnetIds:
        - subnet-0e489891d3a95fc34
        - subnet-07255b931812dc43a
        - subnet-01e9b3ae01d9f985d
    prod:
      securityGroupIds:
        - sg-09ef11f981eedf49a
      subnetIds:
        - subnet-0e489891d3a95fc34
        - subnet-07255b931812dc43a
        - subnet-01e9b3ae01d9f985d
  contentEncoding:
    contentCompression: 100
provider:
  name: aws
  runtime: python3.8
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  stackName: api-rest-pinpass-crawler-${self:provider.stage}
  apiName: api-rest-pinpass-crawler-gateway-${self:provider.stage}
  vpc: ${self:custom.vpc.${self:provider.stage}}
  package:
    exclude:
      - .git/**
      - node_modules/**
      - tests_media/**
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
        - 'sns:CheckIfPhoneNumberIsOptedOut'
      Resource: '*'
    

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  app:
    handler: wsgi_handler.handler
    environment: ${self:custom.environment}
    timeout: 120
    events:
      - http: 
          path: /
          method: ANY
          cors:
            origin: '*'
      - http: 
          path: '{proxy+}'
          method: ANY
          cors:
            origin: '*'
    warmup: true
  migrate:
    handler: mylambdas.migrate.handler
    environment: ${self:custom.environment}
    timeout: 30
  revertmigrate:
    handler: mylambdas.revert_migrate_cirbox_2.handler
    environment: ${self:custom.environment}
    timeout: 30
  cron_crawler_pendientes:
    handler: mylambdas.cron_crawler_pendientes.handler
    environment: ${self:custom.environment}
    timeout: 300
    events:
      - schedule:
          rate: cron(*/1 * * * ? *)
          enabled: true
#  cron_crawler_pin_pendientes:
#    handler: mylambdas.cron_crawler_pin_pendientes.handler
#    environment: ${self:custom.environment}
#    timeout: 300
#    events:
#      - schedule:
#          rate: cron(*/1 * * * ? *)
#          enabled: true
#  cron_crawler_error:
#    handler: mylambdas.cron_crawler_error.handler
#    environment: ${self:custom.environment}
#    timeout: 300
#    events:
#      - schedule:
#          rate: cron(*/3 * * * ? *)
#          enabled: true
#  cron_crawler_procesando:
#    handler: mylambdas.cron_crawler_procesando.handler
#    environment: ${self:custom.environment}
#    timeout: 300
#    events:
#      - schedule:
#          rate: cron(*/4 * * * ? *)
#          enabled: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-delete-loggroups
  - serverless-plugin-warmup
